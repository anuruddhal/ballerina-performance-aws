name: Test Workflow

on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'Cluster name'
        default: 'bal-perf-cluster-test'
        required: false
jobs:
  setup:
    strategy:
      max-parallel: 1
      matrix:
        payload: [ 50 ]
        users: [ 60 ]
    runs-on: ubuntu-latest
    env:
      TEST_NAME: "test_passthrough"
      TEST_ROOT: "tests"
    timeout-minutes: 600
    steps:
    - name: CHECKOUT
      uses: actions/checkout@v2
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Create Cluster
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl create cluster \
          --name "${{ github.event.inputs.clusterName }}" \
          --region us-west-2 \
    - name: Deploy Niginx
      run: |
        eksctl utils write-kubeconfig --cluster="${{ github.event.inputs.clusterName }}"
        # Create a namespace for your ingress resources
        kubectl create namespace ingress-basic

        # Add the ingress-nginx repository
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

        # Use Helm to deploy an NGINX ingress controller
        helm install nginx-ingress ingress-nginx/ingress-nginx \
            --namespace ingress-basic \
            --set controller.replicaCount=2 \
        # Wait for ingress ip
        sleep 60
    - uses: actions/checkout@v2
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Ballerina Build
      uses: ballerina-platform/ballerina-action@master # uses slbeta2
      env:
        CI_BUILD: true
        WORKING_DIR: tests/test_passthrough
      with:
        args:
          build
    - name: Docker push
      run: docker push ballerina/${TEST_NAME}:latest
    - name: Copy artifacts
      run: |
        ls -ltr
        cp -a ${TEST_ROOT}/${TEST_NAME}/target/kubernetes/${TEST_NAME}/. ${TEST_ROOT}/${TEST_NAME}/deployment/
    - name: 'Install Kustomize'
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - name: 'Run Kustomize'
      run: |
          kustomize build ${TEST_ROOT}/${TEST_NAME}/deployment > ${TEST_ROOT}/${TEST_NAME}/final.yaml
    - name: Deploy artifacts
      run: |
        kubectl apply -f ${TEST_ROOT}/${TEST_NAME}/final.yaml
    - name: Write values to outputs
      id: write
      run: |
        host=`kubectl get svc nginx-ingress-ingress-nginx-controller --namespace ingress-basic -o=go-template --template='{{(index .status.loadBalancer.ingress 0 ).hostname}}'`
        IP=`nslookup $host |  awk '{if (NR==6) {print $2}}'`
        INSTANCE_ID=$(aws ec2 run-instances --image-id ami-090717c950a5c34d3 --count 1 --instance-type c5.xlarge --key-name ballerina-jmeter-vm --security-groups ballerina-jmeter-sg --output text --query 'Instances[*].InstanceId')
        aws ec2 wait instance-status-ok
        DNS=$(aws ec2 describe-instances --instance-ids ${INSTANCE_ID} --output text --query 'Reservations[*].Instances[*].PublicDnsName')
        echo "Ingress IP: $IP"
        echo "::set-output name=cluster-ip::$IP"
        echo "::set-output name=scenario-name::${TEST_NAME}"
        echo "::set-output name=git-token::${{ secrets.BALLERINA_BOT_TOKEN }}"
        echo "::set-output name=instance-id::$INSTANCE_ID"
        echo "::set-output name=dns-name::$DNS"
    - name: Execute performance tests
      uses: appleboy/ssh-action@master
      env:
        IP: ${{ steps.write.outputs.cluster-ip }}
        SCENARIO_NAME: ${{ steps.write.outputs.scenario-name }}
        PAYLOAD: ${{ matrix.payload }}
        USERS: ${{ matrix.users }}
      with:
        host: ${{ steps.write.outputs.dns-name }}
        username: ubuntu
        key: ${{ secrets.SSH_KEY }}
        envs: IP,SCENARIO_NAME,PAYLOAD,USERS
        command_timeout: '180m' #3 hours
        timeout: 300s #5 mins
        script: |
          git clone https://github.com/anuruddhal/ballerina-performance-cloud
          sudo cp -r ballerina-performance-cloud/base-image /
          sudo chmod -R 777 /base-image
          sh /base-image/init.sh
          source /etc/profile.d/10-perf-vm.sh
          execute-tests.sh -c $IP -s $SCENARIO_NAME -p $PAYLOAD -u $USERS
    - name: Clean up resources
      env:
        INSTANCE_ID: ${{ steps.write.outputs.instance-id }}
      run: |
         aws ec2 terminate-instances --instance-ids ${INSTANCE_ID}
         eksctl delete cluster "${{ github.event.inputs.clusterName }}"